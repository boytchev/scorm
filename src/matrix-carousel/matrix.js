//
//	class Matrix( )
//

	
class Matrix
{
	static allMatrixData;
	
	constructor( )
	{
		if( !Matrix.allMatrixData )
			this.generateAllMatrixData( );

	} // Matrix.constructor

	
	
	// generate a list of all possible matrices
	generateAllMatrixData( )
	{
		// group 0	I				0
		// group 1	Tx Ty Tz		1..6
		// group 2	Sx Sy Sz		7..12
		// group 3	Txy Txz Tyz		13..24
		// group 4	Sxy Sxz Sxz		25..36
		// group 5	Txyz Sxyz		37..52
		// group 6	Rx Ry Rz		53..58
		// group 7	C P				59..70
		
		var T = 3, 						// translation value
			S = 2.5,					// scale value
			C = 4, 						// orthogonal projection value
			P = 1/2, 					// perspective projection value
			PS = 1/P, 					// perspective scale
			SN = Math.sin(Math.PI/2),	// rot value
			CS = Math.cos(Math.PI/2);	// rot value
	
		Matrix.allMatrixData = [
			//0
			{id:'I', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],			step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},
			//1
			{id:'T+00', matrix:[[1,0,0,1],[0,1,0,0],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'T0+0', matrix:[[1,0,0,0],[0,1,0,1],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,T],[0,0,1,0],[0,0,0,1]]},
			{id:'T00+', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,0],[0,0,1,T],[0,0,0,1]]},
			{id:'T-00', matrix:[[1,0,0,-1],[0,1,0,0],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'T0-0', matrix:[[1,0,0,0],[0,1,0,-1],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,-T],[0,0,1,0],[0,0,0,1]]},
			{id:'T00-', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,0],[0,0,1,-T],[0,0,0,1]]},
			//7
			{id:'S+00', matrix:[[2,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],		step:[[S,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],	},
			{id:'S0+0', matrix:[[1,0,0,0],[0,2,0,0],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,0],[0,S,0,0],[0,0,1,0],[0,0,0,1]],	},
			{id:'S00+', matrix:[[1,0,0,0],[0,1,0,0],[0,0,2,0],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,0],[0,0,S,0],[0,0,0,1]],	},
			{id:'S-00', matrix:[[1/2,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],		step:[[1/S,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],},
			{id:'S0-0', matrix:[[1,0,0,0],[0,1/2,0,0],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,0],[0,1/S,0,0],[0,0,1,0],[0,0,0,1]],},
			{id:'S00-', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1/2,0],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,0],[0,0,1/S,0],[0,0,0,1]],},
			//13
			{id:'T++0', matrix:[[1,0,0,1],[0,1,0,1],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,T],[0,0,1,0],[0,0,0,1]]},
			{id:'T+0+', matrix:[[1,0,0,1],[0,1,0,0],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,0],[0,0,1,T],[0,0,0,1]]},
			{id:'T0++', matrix:[[1,0,0,0],[0,1,0,1],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,T],[0,0,1,T],[0,0,0,1]]},
			{id:'T+-0', matrix:[[1,0,0,1],[0,1,0,-1],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,-T],[0,0,1,0],[0,0,0,1]]},
			{id:'T+0-', matrix:[[1,0,0,1],[0,1,0,0],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,0],[0,0,1,-T],[0,0,0,1]]},
			{id:'T0+-', matrix:[[1,0,0,0],[0,1,0,1],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,T],[0,0,1,-T],[0,0,0,1]]},		
			{id:'T-+0', matrix:[[1,0,0,-1],[0,1,0,1],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,T],[0,0,1,0],[0,0,0,1]]},
			{id:'T-0+', matrix:[[1,0,0,-1],[0,1,0,0],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,0],[0,0,1,T],[0,0,0,1]]},
			{id:'T0-+', matrix:[[1,0,0,0],[0,1,0,-1],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,-T],[0,0,1,T],[0,0,0,1]]},
			{id:'T--0', matrix:[[1,0,0,-1],[0,1,0,-1],[0,0,1,0],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,-T],[0,0,1,0],[0,0,0,1]]},
			{id:'T-0-', matrix:[[1,0,0,-1],[0,1,0,0],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,0],[0,0,1,-T],[0,0,0,1]]},
			{id:'T0--', matrix:[[1,0,0,0],[0,1,0,-1],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,0],[0,1,0,-T],[0,0,1,-T],[0,0,0,1]]},
			//25
			{id:'S++0', matrix:[[2,0,0,0],[0,2,0,0],[0,0,1,0],[0,0,0,1]],		step:[[S,0,0,0],[0,S,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'S+0+', matrix:[[2,0,0,0],[0,1,0,0],[0,0,2,0],[0,0,0,1]],		step:[[S,0,0,0],[0,1,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S0++', matrix:[[1,0,0,0],[0,2,0,0],[0,0,2,0],[0,0,0,1]],		step:[[1,0,0,0],[0,S,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S+-0', matrix:[[2,0,0,0],[0,1/2,0,0],[0,0,1,0],[0,0,0,1]],		step:[[S,0,0,0],[0,1/S,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'S+0-', matrix:[[2,0,0,0],[0,1,0,0],[0,0,1/2,0],[0,0,0,1]],		step:[[S,0,0,0],[0,1,0,0],[0,0,1/S,0],[0,0,0,1]]},
			{id:'S0+-', matrix:[[1,0,0,0],[0,2,0,0],[0,0,1/2,0],[0,0,0,1]],		step:[[1,0,0,0],[0,S,0,0],[0,0,1/S,0],[0,0,0,1]]},
			{id:'S-+0', matrix:[[1/2,0,0,0],[0,2,0,0],[0,0,1,0],[0,0,0,1]],		step:[[1/S,0,0,0],[0,S,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'S-0+', matrix:[[1/2,0,0,0],[0,1,0,0],[0,0,2,0],[0,0,0,1]],		step:[[1/S,0,0,0],[0,1,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S0-+', matrix:[[1,0,0,0],[0,1/2,0,0],[0,0,2,0],[0,0,0,1]],		step:[[1,0,0,0],[0,1/S,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S--0', matrix:[[1/2,0,0,0],[0,1/2,0,0],[0,0,1,0],[0,0,0,1]],	step:[[1/S,0,0,0],[0,1/S,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'S-0-', matrix:[[1/2,0,0,0],[0,1,0,0],[0,0,1/2,0],[0,0,0,1]],	step:[[1/S,0,0,0],[0,1,0,0],[0,0,1/S,0],[0,0,0,1]]},
			{id:'S0--', matrix:[[1,0,0,0],[0,1/2,0,0],[0,0,1/2,0],[0,0,0,1]],	step:[[1,0,0,0],[0,1/S,0,0],[0,0,1/S,0],[0,0,0,1]]},
			//37
			{id:'T+++', matrix:[[1,0,0,1],[0,1,0,1],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,T],[0,0,1,T],[0,0,0,1]]},
			{id:'T++-', matrix:[[1,0,0,1],[0,1,0,1],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,T],[0,0,1,-T],[0,0,0,1]]},
			{id:'T+-+', matrix:[[1,0,0,1],[0,1,0,-1],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,-T],[0,0,1,T],[0,0,0,1]]},
			{id:'T+--', matrix:[[1,0,0,1],[0,1,0,-1],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,T],[0,1,0,-T],[0,0,1,-T],[0,0,0,1]]},
			{id:'T-++', matrix:[[1,0,0,-1],[0,1,0,1],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,T],[0,0,1,T],[0,0,0,1]]},
			{id:'T-+-', matrix:[[1,0,0,-1],[0,1,0,1],[0,0,1,-1],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,T],[0,0,1,-T],[0,0,0,1]]},
			{id:'T--+', matrix:[[1,0,0,-1],[0,1,0,-1],[0,0,1,1],[0,0,0,1]],		step:[[1,0,0,-T],[0,1,0,-T],[0,0,1,T],[0,0,0,1]]},
			{id:'T---', matrix:[[1,0,0,-1],[0,1,0,-1],[0,0,1,-1],[0,0,0,1]],	step:[[1,0,0,-T],[0,1,0,-T],[0,0,1,-T],[0,0,0,1]]},
			//45
			{id:'S+++', matrix:[[2,0,0,0],[0,2,0,0],[0,0,2,0],[0,0,0,1]],		step:[[S,0,0,0],[0,S,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S++-', matrix:[[2,0,0,0],[0,2,0,0],[0,0,1/2,0],[0,0,0,1]],		step:[[S,0,0,0],[0,S,0,0],[0,0,1/S,0],[0,0,0,1]]},
			{id:'S+-+', matrix:[[2,0,0,0],[0,1/2,0,0],[0,0,2,0],[0,0,0,1]],		step:[[S,0,0,0],[0,1/S,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S+--', matrix:[[2,0,0,0],[0,1/2,0,0],[0,0,1/2,0],[0,0,0,1]],	step:[[S,0,0,0],[0,1/S,0,0],[0,0,1/S,0],[0,0,0,1]]},
			{id:'S-++', matrix:[[1/2,0,0,0],[0,2,0,0],[0,0,2,0],[0,0,0,1]],		step:[[1/S,0,0,0],[0,S,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S-+-', matrix:[[1/2,0,0,0],[0,2,0,0],[0,0,1/2,0],[0,0,0,1]],	step:[[1/S,0,0,0],[0,S,0,0],[0,0,1/S,0],[0,0,0,1]]},
			{id:'S--+', matrix:[[1/2,0,0,0],[0,1/2,0,0],[0,0,2,0],[0,0,0,1]],	step:[[1/S,0,0,0],[0,1/S,0,0],[0,0,S,0],[0,0,0,1]]},
			{id:'S---', matrix:[[1/2,0,0,0],[0,1/2,0,0],[0,0,1/2,0],[0,0,0,1]],	step:[[1/S,0,0,0],[0,1/S,0,0],[0,0,1/S,0],[0,0,0,1]]},
			//53
			{id:'Rxy', matrix:[[0,-1,0,0],[1,0,0,0],[0,0,1,0],[0,0,0,1]],		step:[[CS,-SN,0,0],[SN,CS,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'Ryx', matrix:[[0,1,0,0],[-1,0,0,0],[0,0,1,0],[0,0,0,1]],		step:[[CS,SN,0,0],[-SN,CS,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'Rxz', matrix:[[0,0,-1,0],[0,1,0,0],[1,0,0,0],[0,0,0,1]],		step:[[CS,0,-SN,0],[0,1,0,0],[SN,0,CS,0],[0,0,0,1]]},
			{id:'Rzx', matrix:[[0,0,1,0],[0,1,0,0],[-1,0,0,0],[0,0,0,1]],		step:[[CS,0,SN,0],[0,1,0,0],[-SN,0,CS,0],[0,0,0,1]]},
			{id:'Ryz', matrix:[[1,0,0,0],[0,0,-1,0],[0,1,0,0],[0,0,0,1]],		step:[[1,0,0,0],[0,CS,-SN,0],[0,SN,CS,0],[0,0,0,1]]},
			{id:'Rzy', matrix:[[1,0,0,0],[0,0,1,0],[0,-1,0,0],[0,0,0,1]],		step:[[1,0,0,0],[0,CS,SN,0],[0,-SN,CS,0],[0,0,0,1]]},
			//59
			{id:'Cx+', matrix:[[0,0,0,1],[0,1,0,0],[0,0,1,0],[0,0,0,1]],	step:[[0,0,0,C],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'Cy+', matrix:[[1,0,0,0],[0,0,0,1],[0,0,1,0],[0,0,0,1]],	step:[[1,0,0,0],[0,0,0,C],[0,0,1,0],[0,0,0,1]]},
			{id:'Cz+', matrix:[[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,0,1]],	step:[[1,0,0,0],[0,1,0,0],[0,0,0,C],[0,0,0,1]]},
			{id:'Cx-', matrix:[[0,0,0,-1],[0,1,0,0],[0,0,1,0],[0,0,0,1]],	step:[[0,0,0,-C],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},
			{id:'Cy-', matrix:[[1,0,0,0],[0,0,0,-1],[0,0,1,0],[0,0,0,1]],	step:[[1,0,0,0],[0,0,0,-C],[0,0,1,0],[0,0,0,1]]},
			{id:'Cz-', matrix:[[1,0,0,0],[0,1,0,0],[0,0,0,-1],[0,0,0,1]],	step:[[1,0,0,0],[0,1,0,0],[0,0,0,-C],[0,0,0,1]]},
			//65
			{id:'Pz+', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,1,0]],	step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,P,PS]]},
			{id:'Py+', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,1,0,0]],	step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,P,0,PS]]},
			{id:'Px+', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[1,0,0,0]],	step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[P,0,0,PS]]},
			{id:'Pz-', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,-1,0]],	step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,-P,PS]]},
			{id:'Py-', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,-1,0,0]],	step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,-P,0,PS]]},
			{id:'Px-', matrix:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[-1,0,0,0]],	step:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[-P,0,0,PS]]},
			//71
			//.....
		];
		
		for( var data of Matrix.allMatrixData )
		{
			if (!data.offset) data.offset = [0, 0, 0];
		}

	} // Matrix.generateMatrixData
	

	static setMatrix( object, idx, k )
	{
		// extract matrix with index idx lerped from indentity by k
		//		if k=0 return identity
		//		if 0<k<1 return lert(identity,matrix)
		//		if k=1 return the matrix
		
		var matrix = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], // identity
			target = Matrix.allMatrixData[idx].step; 	// target matrix

		var matrixType = Matrix.allMatrixData[idx].id[0];
		
		// for projection matrixes do not go to k=1!!!
		if( matrixType == 'C' ) k = Math.min( k, 0.99 );
		if( matrixType == 'P' ) k = Math.min( k, 0.99 );
		
		// rotations need rescaling
		var rescale = matrixType=='R';

		for( var x=0; x<4; x++ )
		{
			var len = 0;
			for( var y=0; y<4; y++ )
			{
				matrix[x][y] = THREE.MathUtils.lerp( matrix[x][y], target[x][y], k );
				if (rescale) len += matrix[x][y]*matrix[x][y];
			}
			if (rescale) 
			{
				len = Math.sqrt(len);
				for( var y=0; y<4; y++ )
					matrix[x][y] /= len;
			}
		}
		
		object.threejs.matrixAutoUpdate = false;
		object.threejs.matrix.set(
				...matrix[0],
				...matrix[1],
				...matrix[2],
				...matrix[3]
			);
	}
	
	
} // class Matrix

